@page "/animals/{AnimalId:int}/bitacora"
@using Database.Models
@using BackOffice.Services
@using MudBlazor
@using MudBlazor.Charts
@inject IAnimalService AnimalService
@inject IBitacoraService BitacoraService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Bitácora del Animal</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (animal != null)
    {
        <MudGrid>
            <MudItem xs="12">
                <MudBreadcrumbs Items="_breadcrumbs" />
            </MudItem>

            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h4" Class="mb-2">Bitácora del Animal</MudText>
                    <MudText Typo="Typo.body1"><strong>Código RFID:</strong> @animal.CodigoRfid</MudText>
                    <MudText Typo="Typo.body1"><strong>Peso Actual:</strong> @animal.PesoActualLibras.ToString("F2") libras</MudText>
                    <MudText Typo="Typo.body1"><strong>Raza:</strong> @animal.Raza?.Nombre</MudText>
                    <MudText Typo="Typo.body1"><strong>Estado:</strong> @animal.EstadoAnimal?.Nombre</MudText>
                </MudPaper>
            </MudItem>

            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h5" Class="mb-4">Gráfico de Peso</MudText>
                    @if (chartSeries?.Any() == true)
                    {
                        <MudChart ChartType="ChartType.Line" 
                                ChartSeries="@chartSeries" 
                                XAxisLabels="@xAxisLabels"
                                Width="100%" 
                                Height="400px"
                                ChartOptions="@chartOptions" />
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info">No hay datos de peso disponibles para mostrar en el gráfico.</MudAlert>
                    }
                </MudPaper>
            </MudItem>

            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-4">
                    <MudText Typo="Typo.h5" Class="mb-4">Historial de Vacunas</MudText>
                    
                    <MudGrid Class="mb-3">
                        <MudItem xs="12" sm="6" md="4">
                            <MudTextField @bind-Value="searchTermVacunas"
                                         Label="Buscar vacunas"
                                         Placeholder="Buscar por nombre de vacuna..."
                                         Variant="Variant.Outlined"
                                         Adornment="Adornment.End"
                                         AdornmentIcon="@Icons.Material.Filled.Search"
                                         OnKeyUp="@(async (e) => { if (e.Key == "Enter") await FilterVacunas(); })"
                                         Clearable="true"
                                         OnClearButtonClick="@(async () => { searchTermVacunas = string.Empty; await FilterVacunas(); })" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="2">
                            <MudButton Variant="Variant.Filled"
                                      Color="Color.Primary"
                                      StartIcon="@Icons.Material.Filled.Search"
                                      OnClick="FilterVacunas"
                                      FullWidth="true"
                                      Class="mud-height-full">
                                Buscar
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                    
                    <MudTable Items="@pagedVacunas"
                              Dense="@true"
                              Hover="@true"
                              Breakpoint="Breakpoint.Sm"
                              Loading="@isLoadingVacunas"
                              LoadingProgressColor="Color.Info">
                        <HeaderContent>
                            <MudTh>Vacuna</MudTh>
                            <MudTh>Fecha de Aplicación</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Vacuna">@context.Vacuna?.Nombre</MudTd>
                            <MudTd DataLabel="Fecha">@context.FechaRegistro.ToString("dd/MM/yyyy HH:mm")</MudTd>
                        </RowTemplate>
                    </MudTable>

                    @if (totalVacunas > pageSize)
                    {
                        <MudPagination Count="@totalPages" 
                                     SelectedChanged="@OnPageChanged" 
                                     Selected="@currentPage"
                                     Class="mt-4" />
                    }

                    @if (!filteredVacunas.Any() && string.IsNullOrWhiteSpace(searchTermVacunas))
                    {
                        <MudAlert Severity="Severity.Info" Class="mt-4">
                            No hay vacunas registradas para este animal.
                        </MudAlert>
                    }
                    else if (!filteredVacunas.Any() && !string.IsNullOrWhiteSpace(searchTermVacunas))
                    {
                        <MudAlert Severity="Severity.Info" Class="mt-4">
                            No se encontraron vacunas que coincidan con "@searchTermVacunas".
                        </MudAlert>
                    }
                </MudPaper>
            </MudItem>

            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="Icons.Material.Filled.ArrowBack"
                          OnClick="@(() => Navigation.NavigateTo("/animals"))">
                    Volver a Animales
                </MudButton>
            </MudItem>
        </MudGrid>
    }
    else if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
        <MudText>Cargando información del animal...</MudText>
    }
    else
    {
        <MudAlert Severity="Severity.Error">
            No se pudo cargar la información del animal.
        </MudAlert>
    }
</MudContainer>

@code {
    [Parameter] public int AnimalId { get; set; }

    private Animale? animal;
    private List<BitacoraPeso> bitacoraPesos = new();
    private List<BitacorasVacuna> vacunas = new();
    private List<BitacorasVacuna> filteredVacunas = new();
    private List<BitacorasVacuna> pagedVacunas = new();
    private string searchTermVacunas = string.Empty;
    
    private bool isLoading = true;
    private bool isLoadingVacunas = true;

    private List<ChartSeries> chartSeries = new();
    private string[] xAxisLabels = Array.Empty<string>();
    private ChartOptions chartOptions = new ChartOptions();

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalVacunas = 0;
    private int totalPages = 1;

    private List<BreadcrumbItem> _breadcrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Inicio", href: "/"),
        new BreadcrumbItem("Animales", href: "/animals"),
        new BreadcrumbItem("Bitácora", href: null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAnimalData();
        await LoadBitacoraData();
        SetupChart();
    }

    private async Task LoadAnimalData()
    {
        try
        {
            animal = await AnimalService.GetAnimalByIdAsync(AnimalId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar el animal: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadBitacoraData()
    {
        try
        {
            bitacoraPesos = await BitacoraService.GetBitacoraPesosByAnimalIdAsync(AnimalId);
            vacunas = await BitacoraService.GetBitacorasVacunasByAnimalIdAsync(AnimalId);
            filteredVacunas = vacunas;
            totalVacunas = filteredVacunas.Count;
            UpdatePagedVacunas();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error al cargar los datos de bitácora: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingVacunas = false;
        }
    }

    private void SetupChart()
    {
        if (bitacoraPesos?.Any() == true)
        {
            var orderedData = bitacoraPesos.OrderBy(b => b.FechaRegistro).ToList();
            
            var pesoData = orderedData.Select(b => (double)b.Peso).ToArray();
            var altoData = orderedData.Select(b => (double)b.Alto).ToArray();
            var largoData = orderedData.Select(b => (double)b.Largo).ToArray();
            var diametroData = orderedData.Select(b => (double)b.Diametro).ToArray();

            xAxisLabels = orderedData.Select(b => b.FechaRegistro.ToString("dd/MM/yyyy")).ToArray();

            chartSeries = new List<ChartSeries>
            {
                new ChartSeries { Name = "Peso (libras)", Data = pesoData },
                new ChartSeries { Name = "Alto (cm)", Data = altoData },
                new ChartSeries { Name = "Largo (cm)", Data = largoData },
                new ChartSeries { Name = "Diámetro (cm)", Data = diametroData }
            };

            chartOptions = new ChartOptions
            {
                YAxisTicks = 10,
                MaxNumYAxisTicks = 15,
                YAxisFormat = "0.##",
                LineStrokeWidth = 3
            };
        }
    }

    private void UpdatePagedVacunas()
    {
        var skip = (currentPage - 1) * pageSize;
        pagedVacunas = filteredVacunas.OrderByDescending(v => v.FechaRegistro)
                                      .Skip(skip)
                                      .Take(pageSize)
                                      .ToList();
    }

    private async Task FilterVacunas()
    {
        if (string.IsNullOrWhiteSpace(searchTermVacunas))
        {
            filteredVacunas = vacunas;
        }
        else
        {
            filteredVacunas = vacunas.Where(v => 
                v.Vacuna?.Nombre?.Contains(searchTermVacunas, StringComparison.OrdinalIgnoreCase) ?? false
            ).ToList();
        }
        
        totalVacunas = filteredVacunas.Count;
        currentPage = 1;
        totalPages = (int)Math.Ceiling((double)totalVacunas / pageSize);
        UpdatePagedVacunas();
        await Task.CompletedTask;
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        UpdatePagedVacunas();
        await Task.CompletedTask;
    }
}